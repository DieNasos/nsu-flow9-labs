import ds/tree;
import lingo/pegcode/driver;
import myrationals;

export {
    simplifyOnce(e : Expr) -> Expr;
	simplifyFully(e : Expr) -> Expr;
    diff(expr : Expr, var : string) -> Expr;
    s2e(expr : string) -> Expr;
    e2s(e : Expr) -> string;
    calc(expr : Expr, vars : Tree<string, Rational>) -> Maybe<Rational>;
}

// expresion
Expr ::= Var, IntConst, RatConst, Minus, Div, Sub, Mul, Sum, Pow;
// variable
Var : (name : string);
// integer constant (n)
IntConst : (value : int);
// rational constant (n/m)
RatConst : (value : Rational);
// simple minus (-n)
Minus : (e : Expr);
// division (/)
Div : (left : Expr, right : Expr);
// subtraction (-)
Sub : (left: Expr, right : Expr);
// multiplication (*)
Mul : (left : Expr, right : Expr);
// addition (+)
Sum : (left : Expr, right : Expr);
// power (^)
Pow : (left : Expr, right : Expr);

simplifyOnce(e : Expr) -> Expr {
    // simplifying expression
    switch(e) {
		Var(x): Var(x);
		IntConst(c): IntConst(c);
		RatConst(c): RatConst(c);
		Minus(r): Minus(simplifyOnce(r));
		Div(l, r) : {
			if (l == r) {IntConst(1)}
            else if (r == IntConst(1)) {l} 
            else {Div(simplifyOnce(l), simplifyOnce(r))};
		}
		Sub(l, r) : {
			if (l == IntConst(0) && r == IntConst(0)) {IntConst(0)} 
            else if (l == r) {IntConst(0)}
            else if (r == IntConst(0)) {l}
            else if (l == IntConst(0)) {Minus(r)}
            else {Sub(simplifyOnce(l), simplifyOnce(r))};
		}
		Mul(l, r) : {
			if (l == IntConst(0) || r == IntConst(0)) {IntConst(0)} 
            else if (l == IntConst(1)) {r}
            else if (r == IntConst(1)) {l} 
            else {Mul(simplifyOnce(l), simplifyOnce(r))};
		}
		Sum(l, r) : {
			if (l == IntConst(0) && r == IntConst(0)) {IntConst(0)} 
            else if (l == IntConst(0)) {r}
            else if (r == IntConst(0)) {l}
            else {Sum(simplifyOnce(l), simplifyOnce(r))};
		}
		Pow(l, r) : {
			if (l == IntConst(1) || r == IntConst(0)) {IntConst(1)}
            else {Pow(simplifyOnce(l), simplifyOnce(r))}
        }
    }
}

simplifyFully(e : Expr) -> Expr {
	e1 = simplifyOnce(e);
	if (e2s(e1) == e2s(e)) {
		// simplified!
		e;
	} else {
		// simplifying...
		simplifyFully(e1);
	}
}

diff(expr: Expr, varname: string) -> Expr {
    // differentiating expression
    switch (expr) {
        Var(name) : {
            if (name == varname) {IntConst(1)}
            else {IntConst(0)}
        };
        IntConst(c) : IntConst(0);
        RatConst(c) : RatConst(Rational(0, 0));
        // (-e)' == -(e')
        Minus(e) : Minus(diff(e, varname));
        // (l/r)' == (l' * r - l * r') / r*r
        Div(l, r): Div(Sub(Mul(diff(l, varname), r), Mul(l, diff(r, varname))), Mul(r, r));
        // (l-r)' == l' - r'
        Sub(l, r): Sub(diff(l, varname), diff(r, varname));
        // (l*r)' == l' * r + l * r'
        Mul(l, r): Sum(Mul(diff(l, varname), r), Mul(l, diff(r, varname)));
        // (l+r)' == l' + r'
        Sum(l, r): Sum(diff(l, varname), diff(r, varname));
        // (l^r)' == r * (l ^ (r - 1)) * l' (var is in l)
        Pow(l, r): Mul(Mul(r, Pow(l, Sub(r, IntConst(1)))), diff(l, varname));
    }
}

arithGrammarOp: ref Maybe<[PegOp]> = ref None();
initGrammar() {
	onlyOnce(arithGrammarOp, \ -> {
		compilePegGrammar("#include mylingo.lingo");
	});
}

s2e(expr : string) -> Expr {
    // converting string to expression
    parsic(initGrammar(), expr, defaultPegActions);
}

e2s(e : Expr) -> string {
    // converting expression to string
    switch (e) {
        Pow(l, r): concatStrings(["(", e2s(l), "^", e2s(r), ")"]);
        Sum(l, r): concatStrings(["(", e2s(l), "+", e2s(r), ")"]);
        Mul(l, r):concatStrings(["(", e2s(l), "*", e2s(r), ")"]);
        Sub(l, r): concatStrings(["(", e2s(l), "-", e2s(r), ")"]);
        Div(l, r): concatStrings(["(", e2s(l), "/", e2s(r), ")"]);
        Minus(expr): concatStrings(["-", e2s(expr)]);
        RatConst(c): r2s(c);
        IntConst(c): i2s(c);
        Var(name): name;
    }
}

calc(expr : Expr, vars : Tree<string, Rational>) -> Maybe<Rational> {
	// calculating abstract syntax tree (for rationals)
	switch(expr) {
		// checking type of expression
		Var(x) : {
			// checking if variable is initialized
			// (if there is value for variable-name-key in variables-tree)
			switch(lookupTree(vars, x)) {
				Some(val): Some(val);
				None(): {
					println("ERROR :: variable is not initialized");
					None();
				};
			}
		}
		IntConst(c) : {
			// returning rational c/1 == c
			Some(Rational(c, 1));
		}
		RatConst(c) : {
			Some(c);
		}
		Minus(r) : {
			// returning -expr
			switch(calc(r, vars)) {
				Some(e): Some(minusRational(e));
				None(): None();
			};
		}
		Div(l, r) : {
			// l/r
			// checking left operand
			switch(calc(l, vars)) {
                Some(left): {
					// checking right operand
					switch(calc(r, vars)) {
                    	Some(right): Some(divRationals(left, right));
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
		Sub(l, r) : {
			// l-r
			// checking left operand
			switch(calc(l, vars)) {
                Some(left): {
					// checking right operand
					switch(calc(r, vars)) {
                    	Some(right): Some(subRationals(left, right));
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
		Mul(l, r) : {
			// l*r
			// checking left operand
			switch(calc(l, vars)) {
                Some(left): {
					// checking right operand
					switch(calc(r, vars)) {
                    	Some(right): Some(multRationals(left, right));
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
		Sum(l, r) : {
			// l+r
			// checking left operand
			switch(calc(l, vars)) {
                Some(left): {
					switch(calc(r, vars)) {
						// checking right operand
                    	Some(right): Some(sumRationals(left, right));
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
		Pow(l, r) : {
			// l^r
			// checking left operand
			switch(calc(l, vars)) {
                Some(left): {
					switch(calc(r, vars)) {
						// checking right operand
                    	Some(right): Some(powRationals(left, right));
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
	}
}