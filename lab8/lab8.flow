import string;
import ds/tree;
import lingo/pegcode/driver;
import mygrammar;

arithGrammarOp: ref Maybe<[PegOp]> = ref None();

initGrammar() {
	onlyOnce(arithGrammarOp, \ -> {
		compilePegGrammar("#include mylingo.lingo");
	});
}

calcAST(e : Expr, vars : Tree<string, int>) -> Maybe<int> {
	switch(e) {
		Var(s) : {
			// checking if variable is initialized
			// (if there is value for variable-name-key in variables-tree)
			switch(lookupTree(vars, s)) {
				Some(val): Some(val);
				None(): {
					println("ERROR :: variable is not initialized");
					None();
				};
			}
		}
		IntConst(c) : {
			Some(c);
		}
		Mul(l, r) : {
			// checking left operand
			switch(calcAST(l, vars)) {
                Some(left): {
					// checking right operand
					switch(calcAST(r, vars)) {
                    	Some(right): Some(left * right);
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
		Add(l, r) : {
			// checking left operand
			switch(calcAST(l, vars)) {
                Some(left): {
					switch(calcAST(r, vars)) {
						// checking right operand
                    	Some(right): Some(left + right);
                    	None(): None();
					}
            	};
                None(): None();
            };
		}
	}
}

calc(expr : string, vars : Tree<string, int>) -> Maybe<int> {
	// creating AST, calculating it's expression and returning result
	calcAST(parsic(initGrammar(), expr, defaultPegActions), vars);
}

main() {
	// creating and initializing variables-tree
	vars : Tree<string, int> = setTree(makeTree(), "x", 3);
	// creating expression
	expr = " 1   + 2     *x   ";
	// calculating expression and printing result in console
	switch(calc(expr, vars)) {
		Some(val): println(val);
		None(): println("ERROR");
	}
}